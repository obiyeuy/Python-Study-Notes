"""
模块的介绍：
在开发的过程中，随着程序员的代码写的越来越多，导致在一个文件中代码也就会越来越长，从而越长的代码也就不那么容易维护。
所以为了编写可维护的代码，我们程序员就把很多函数给分门别类的分组，分别放到不同的文件里，这样每个文件里的代码就相对较少。
其实，很多编程语言都是采用这种组织代码的方式，在python中模块也有很多，一个.py的文件就可以称之为一个模块。

使用模块的好处:
1 最大好处：大大提高了代码的可维护性。
2 编写代码不必从零开始。当一个模块编写完成后，就可以被其他地方引用
  其实我们在编写程序的时候也常常引用其他模块，可能包括python内置模块和其他第三方模块。
3 使用模块可以避免函数名和变量名冲突。
  每个模块有独立的命名空间，因此相同名字的函数和变量完全可以分别存在不同的模块中，
  所以自己在编写模块时，不必考虑名字和其他模块冲突（但是模块名不能相同，千万不能和内置模块或者第三方的同名）
"""

import math  # 导入模块

print(math.sqrt(9))   #加.使用函数，变量，类

"""
导入模块：
  1 import  模块名
        模块名 变量   模块名函数    模块名类
  2 from  模块名  import 变量，函数，类
       在代码中可以直接使用变量，函数，类
  3 from  模块名  import *
       该模块中所有内容
       但是如果模块想限制你获取的内容，可以在模块中使用__all__ = [使用*可以访问的内容]
  4 无论是什么形式，都会将模块中内容进行加载，如模块中有函数声明则也会先进行调用
    如果不希望其进行调用，就要用__name__
    在自己模块中就是__main__,在其他模块中通过导入的方式调用的话就是它的模块名
    因此在模块中将函数调用前进行__name__判断即可
  """

print(__name__)   # __main__


# 文件夹与包
"""
文件夹：非py文件  包：py文件，含有__init__.py文件
一个包中可以存放多个模块。
   项目>包>模块>类 函数 变量
   
只要导包，就会默认调用__init__.py文件
作用：
  1 当导入包的时候，把一些初始化的函数，变量，类定义在__init__.py文件中
  2 此文件中函数，变量等的访问，只需要通过包名，函数...
  3 结合__all__ =[通过*可以访问的模块]
"""



# 模块的循环导入
"""
模块的循环导入问题:   大型的python项目中，需要很多python文件，出于架构不当，可能出现模块的相互导入
   A:模块
     def test():
         f()
   B:模块
     def f():
         test()
         
架构错误，会报错，无法实现
解决办法：
  1 重新架构
  2 将导入的语句放到函数里面
  3 把导入语句放在模块的最后
"""














